package com.rakuten.ui.pages;

import com.rakuten.framework.Browser;
import com.rakuten.framework.session.SessionManager;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 * Created by FabioCosta
 */
public abstract class PageBase {

    static Browser browser;
    static String defineBrowser = "CHROME";
    protected WebDriver driver;

    public PageBase() {
        try {
            browser = new Browser(defineBrowser);
            driver = SessionManager.getSessionDriver();
            PageFactory.initElements(driver, this);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (!isLoaded()) {
            throw new RuntimeException("Page was not loaded.");
        }
    }

    public abstract boolean isLoaded();

    public boolean waitClick(WebElement webElement, long timeOut) {
        if (waitElementToBeClickable(webElement, timeOut)) {
            webElement.click();
            return true;
        } else {
            throw new NoSuchElementException("Failed to click in element: [" + webElement + "]");
        }
    }

    public boolean waitElementToBeClickable(WebElement webElement, long timeOut) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, timeOut);
            wait.until(ExpectedConditions.visibilityOf(webElement));
            wait.until(ExpectedConditions.elementToBeClickable(webElement));
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public boolean waitAllElementToBeClickable(By by, long timeOut) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, timeOut);
            wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(by));
            return true;
        } catch (Exception e) {
            System.out.println("Exception generated by: " + by + " | All elements from it didn't load after: " + timeOut + "s \n" + e);
            return false;
        }
    }

    public boolean waitVisibilityOf(WebElement webElement, long timeOut) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, timeOut);
            wait.until(ExpectedConditions.visibilityOf(webElement));
            return true;
        } catch (Exception e) {
            System.out.println("Exception generated by: " + webElement + " | It was not visible after: " + timeOut + "s \n" + e);
            return false;
        }
    }
}
